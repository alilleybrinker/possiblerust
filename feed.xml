<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.possiblerust.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.possiblerust.com/" rel="alternate" type="text/html" /><updated>2021-02-01T07:24:20-08:00</updated><id>https://www.possiblerust.com/feed.xml</id><title type="html">Possible Rust</title><subtitle>Learning what&amp;rsquo;s possible in Rust.</subtitle><author><name>Andrew Lilley Brinker</name></author><entry><title type="html">How to Read Rust Functions, Part 1</title><link href="https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1" rel="alternate" type="text/html" title="How to Read Rust Functions, Part 1" /><published>2021-01-26T12:00:00-08:00</published><updated>2021-01-26T12:00:00-08:00</updated><id>https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1</id><author><name>Andrew Lilley Brinker</name></author><category term="Guide" /><category term="Functions" /><summary type="html">Rust functions are surprisingly diverse, sitting at the intersection of multiple language features which may take time to understand. In this post, we’ll walk through those features and explain how they appear in function signatures, so you can be well-equipped to understand functions you see in the wild, or identify the best way to write the functions you need in your own code.</summary></entry><entry><title type="html">Non-Generic Inner Functions</title><link href="https://www.possiblerust.com/pattern/non-generic-inner-functions" rel="alternate" type="text/html" title="Non-Generic Inner Functions" /><published>2020-10-20T18:19:00-07:00</published><updated>2020-10-20T18:19:00-07:00</updated><id>https://www.possiblerust.com/pattern/non-generic-inner-functions</id><author><name>Andrew Lilley Brinker</name></author><category term="Pattern" /><category term="Generics" /><summary type="html">Steve Klabnik recently wrote about whether out parameters are idiomatic in Rust. The post ends by showing a snippet of code: a generic function, with a non-generic function inside of it which contains the actual implementation. Steve says this pattern may warrant its own post, so here is that post, where I’ll explain why this inner function is useful, discuss the trade-offs of doing it, and describe why this pattern will hopefully not be necessary in the future.</summary></entry><entry><title type="html">How to Read First Impression Posts</title><link href="https://www.possiblerust.com/community/how-to-read-first-impression-posts" rel="alternate" type="text/html" title="How to Read First Impression Posts" /><published>2020-08-14T18:37:00-07:00</published><updated>2020-08-14T18:37:00-07:00</updated><id>https://www.possiblerust.com/community/how-to-read-first-impression-posts</id><author><name>Andrew Lilley Brinker</name></author><category term="Community" /><category term="Opinion" /><summary type="html">Rust gets a lot of first impression posts. For people in the community, reading those posts can often be frustrating, with factual errors leaving people concerned that others will get the wrong impression. For people outside the community, they may be unsure of how much said is true, or how to read these posts effectively. In this post, I outline how I think about first impression posts, and why I recommend reading them the same way.</summary></entry><entry><title type="html">Inbound &amp;amp; Outbound FFI</title><link href="https://www.possiblerust.com/guide/inbound-outbound-ffi" rel="alternate" type="text/html" title="Inbound &amp;amp; Outbound FFI" /><published>2020-08-05T18:10:00-07:00</published><updated>2020-08-05T18:10:00-07:00</updated><id>https://www.possiblerust.com/guide/inbound-outbound-ffi</id><author><name>Andrew Lilley Brinker</name></author><category term="Guide" /><category term="FFI" /><summary type="html">Foreign Function Interfaces (FFI) are a core mechanism for enabling integration of new languages into existing codebases or building on existing libraries. That said, the term “FFI” is often overloaded in ways that may be unclear or ambiguous, and the area can seem overwhelming to approach. In this post, I explain the two “directions” of FFI, some patterns for how FFI in each direction is handled in Rust and further break down some FFI design approaches.</summary></entry><entry><title type="html">Enum or Trait Object</title><link href="https://www.possiblerust.com/guide/enum-or-trait-object" rel="alternate" type="text/html" title="Enum or Trait Object" /><published>2020-07-27T17:53:00-07:00</published><updated>2020-07-27T17:53:00-07:00</updated><id>https://www.possiblerust.com/guide/enum-or-trait-object</id><author><name>Andrew Lilley Brinker</name></author><category term="Guide" /><category term="Enums" /><category term="Trait Objects" /><summary type="html">Rust has two major mechanisms for delegating logic: enums and trait objects, and it may be unclear when to use one or the other. In this post, I will walk through how each works, what the tradeoffs are, and how to choose the right option for your code.</summary></entry><entry><title type="html">Rust Lints You May Not Know</title><link href="https://www.possiblerust.com/pattern/rust-lints-you-may-not-know" rel="alternate" type="text/html" title="Rust Lints You May Not Know" /><published>2020-06-21T15:59:00-07:00</published><updated>2020-06-21T15:59:00-07:00</updated><id>https://www.possiblerust.com/pattern/rust-lints-you-may-not-know</id><author><name>Andrew Lilley Brinker</name></author><category term="Pattern" /><category term="Lints" /><summary type="html">The Rust compiler ships with a number of useful lints on by default, and many use Clippy to provide additional lints. It’s less well known that the Rust compiler ships with some useful lints which are set to allow by default, meaning they don’t generate warnings. In this post, I’ll explain what each of these lints does, and why it might be useful.</summary></entry></feed>